/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ui.welcome;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import ui.welcome.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import processes.helpers.WindowStatus;
import ui.functions.*;
import ui.infosheets.*;
import ui.infosheets.ClassicalIonNames;
import ui.infosheets.CommonElements;
import ui.infosheets.MetalSeriesActivity;
import ui.infosheets.MolecularPrefixes;
import ui.infosheets.SolubilityRules;
import ui.infosheets.SummaryReactionTypes;

/**
 *
 * @author Jared Cassarly 
 * all other authors that say "jared" are Jared Cassarly
 */
public class ChemistryWelcomeMenu extends javax.swing.JFrame {
    
    // status names in the windowstatus file
    final private String classicalIonNamesStatus = "Classical Ion Names Status";
    final private String metalSeriesActivityStatus = "Metal Series Activity Status";
    final private String molarMassCalcStatus = "Molar Mass Calculator Status";
    final private String molecularPrefixesStatus = "Molecular Prefixes Status";
    final private String solubilityRulesStatus = "Solubility Rules Status";
    final private String summaryReactionTypesStatus = "Summary of Reaction Types Status";
    final private String commonElementsStatus = "Common Elements Status";
    final private String balancedEquationCheckerStatus = " Balanced Equation Checker Status";
    
    // local variables to hold all the windows that can be open
    private MolarMassCalculator calc;
    private CommonElements table;
    private SolubilityRules rules;
    private MetalSeriesActivity metalRules;
    private SummaryReactionTypes sumRules;
    private MolecularPrefixes molRules;
    private ClassicalIonNames cinRules;
    private BalancedEquationChecker checker;

    /**
     * Creates new form ChemistryWelcomeMenu
     */
    public ChemistryWelcomeMenu() {
        calc = null;
        table = null;
        rules = null;
        metalRules = null;
        sumRules = null;
        molRules = null;
        cinRules = null;
        checker = null;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        commonNames = new javax.swing.JButton();
        molarMassCalc = new javax.swing.JButton();
        molecularPrefixes = new javax.swing.JButton();
        metalSeriesActivity = new javax.swing.JButton();
        classicalIonNames = new javax.swing.JButton();
        solubilityRules = new javax.swing.JButton();
        summaryReactionTypes = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        balancedEquationChecker = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage((getClass().getClassLoader().getResource("resources/icon.png"))));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Calculator");

        commonNames.setText("Common Names and Formulas");
        commonNames.setMargin(new java.awt.Insets(1, 1, 1, 1));
        commonNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commonNamesActionPerformed(evt);
            }
        });

        molarMassCalc.setText("Molar Mass Calculator");
        molarMassCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                molarMassCalcActionPerformed(evt);
            }
        });

        molecularPrefixes.setText("Molecular Prefixes");
        molecularPrefixes.setMargin(new java.awt.Insets(1, 1, 1, 1));
        molecularPrefixes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                molecularPrefixesActionPerformed(evt);
            }
        });

        metalSeriesActivity.setText("Activity Series of Metals");
        metalSeriesActivity.setMargin(new java.awt.Insets(1, 1, 1, 1));
        metalSeriesActivity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metalSeriesActivityActionPerformed(evt);
            }
        });

        classicalIonNames.setText("Classical Ion Names");
        classicalIonNames.setMargin(new java.awt.Insets(1, 1, 1, 1));
        classicalIonNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classicalIonNamesActionPerformed(evt);
            }
        });

        solubilityRules.setText("Solubility Rules Of Salts in Water");
        solubilityRules.setMargin(new java.awt.Insets(1, 1, 1, 1));
        solubilityRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solubilityRulesActionPerformed(evt);
            }
        });

        summaryReactionTypes.setText("Summary of Reaction Types");
        summaryReactionTypes.setMargin(new java.awt.Insets(1, 1, 1, 1));
        summaryReactionTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryReactionTypesActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Useful Info Sheets");

        balancedEquationChecker.setText("Balanced Equation Checker");
        balancedEquationChecker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balancedEquationCheckerActionPerformed(evt);
            }
        });

        jMenu1.setText("About");

        jMenuItem1.setText("Contact Info");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(commonNames, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(molarMassCalc, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(solubilityRules, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(summaryReactionTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(molecularPrefixes, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classicalIonNames, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(metalSeriesActivity, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(balancedEquationChecker, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(49, 49, 49)))
                .addContainerGap(20, Short.MAX_VALUE))
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(molarMassCalc, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(balancedEquationChecker, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commonNames, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solubilityRules, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(summaryReactionTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(molecularPrefixes, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classicalIonNames, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metalSeriesActivity, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void molarMassCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_molarMassCalcActionPerformed
        // if the molar mass calculator window is not open
        if (WindowStatus.getWindowStatus(molarMassCalcStatus).equals("false")) {
            // tell the file that the window is open
            WindowStatus.writeFile("true", molarMassCalcStatus);
            // if the common elements window is open, set the MolarMassCalculator as the parent and open the MolarMassCalculator window
            if (WindowStatus.getWindowStatus(commonElementsStatus).equals("true")) {
                calc = new MolarMassCalculator(this);
                calc.setVisible(true);
                table.setParent(calc);
            }
            // if common elements is closed, just open the MolarMAssCalculator window
            else {
                calc = new MolarMassCalculator(this);
                calc.setVisible(true);
            }
            
        }
        // if the molar mass calculator is already open, bring to front
        else {
            calc.setVisible(true);
            calc.setState(java.awt.Frame.NORMAL);
            calc.toFront();
        }
    }//GEN-LAST:event_molarMassCalcActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // tell the file all windows are closed
        WindowStatus.writeFile("false", classicalIonNamesStatus);
        WindowStatus.writeFile("false", metalSeriesActivityStatus);
        WindowStatus.writeFile("false", molarMassCalcStatus);
        WindowStatus.writeFile("false", molecularPrefixesStatus);
        WindowStatus.writeFile("false", solubilityRulesStatus);
        WindowStatus.writeFile("false", summaryReactionTypesStatus);
        WindowStatus.writeFile("false", commonElementsStatus);
        WindowStatus.writeFile("false", balancedEquationCheckerStatus);
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // tell the file all windows are closed
        WindowStatus.writeFile("false", classicalIonNamesStatus);
        WindowStatus.writeFile("false", metalSeriesActivityStatus);
        WindowStatus.writeFile("false", molarMassCalcStatus);
        WindowStatus.writeFile("false", molecularPrefixesStatus);
        WindowStatus.writeFile("false", solubilityRulesStatus);
        WindowStatus.writeFile("false", summaryReactionTypesStatus);
        WindowStatus.writeFile("false", commonElementsStatus);
        WindowStatus.writeFile("false", balancedEquationCheckerStatus);
    }//GEN-LAST:event_formWindowClosed

    private void commonNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commonNamesActionPerformed
        commonElementsEvent();
    }//GEN-LAST:event_commonNamesActionPerformed

    private void balancedEquationCheckerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balancedEquationCheckerActionPerformed
        // if the balanced equation checker is closed, open it
        if (WindowStatus.getWindowStatus(balancedEquationCheckerStatus).equals("false")) {
            WindowStatus.writeFile("true", balancedEquationCheckerStatus);
            checker = new BalancedEquationChecker();
            checker.setVisible(true);
        }
        // else bring the window to front
        else {
            checker.setVisible(true);
            checker.setState(java.awt.Frame.NORMAL);
            checker.toFront();
        }
    }//GEN-LAST:event_balancedEquationCheckerActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // open contact info pane
        JFrame frame = new JFrame("Contact Info");
        JOptionPane.showMessageDialog(frame, "Questions? Contact Jared Cassarly at\njaredcassarly@gmail.com", "Contact Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void metalSeriesActivityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metalSeriesActivityActionPerformed
        // if the metal series activity window is closed, open it
        if (WindowStatus.getWindowStatus(metalSeriesActivityStatus).equals("false")) {
            WindowStatus.writeFile("true", metalSeriesActivityStatus);
            metalRules = new MetalSeriesActivity();
            metalRules.setVisible(true);
        }
        // else bring the window to front
        else {
            metalRules.setVisible(true);
            metalRules.setState(java.awt.Frame.NORMAL);
            metalRules.toFront();
        }
    }//GEN-LAST:event_metalSeriesActivityActionPerformed

    private void classicalIonNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classicalIonNamesActionPerformed
        // if the calssical ion names window is closed, open it
        if (WindowStatus.getWindowStatus(classicalIonNamesStatus).equals("false")) {
            WindowStatus.writeFile("true", classicalIonNamesStatus);
            cinRules = new ClassicalIonNames();
            cinRules.setVisible(true);
        }
        // else bring the window to front
        else {
            cinRules.setVisible(true);
            cinRules.setState(java.awt.Frame.NORMAL);
            cinRules.toFront();
        }
    }//GEN-LAST:event_classicalIonNamesActionPerformed

    private void molecularPrefixesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_molecularPrefixesActionPerformed
        // if the molecular prefixes window is closed, open it
        if (WindowStatus.getWindowStatus(molecularPrefixesStatus).equals("false")) {
            WindowStatus.writeFile("true", molecularPrefixesStatus);
            molRules = new MolecularPrefixes();
            molRules.setVisible(true);
        }
        // else bring the window to front
        else {
            molRules.setVisible(true);
            molRules.setState(java.awt.Frame.NORMAL);
            molRules.toFront();
        }
    }//GEN-LAST:event_molecularPrefixesActionPerformed

    private void summaryReactionTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryReactionTypesActionPerformed
        // if the summary reation types window is closed, open it
        if (WindowStatus.getWindowStatus(summaryReactionTypesStatus).equals("false")) {
            WindowStatus.writeFile("true", summaryReactionTypesStatus);
            sumRules = new SummaryReactionTypes();
            sumRules.setVisible(true);
        }
        // else bring the window to front
        else {
            sumRules.setVisible(true);
            sumRules.setState(java.awt.Frame.NORMAL);
            sumRules.toFront();
        }
    }//GEN-LAST:event_summaryReactionTypesActionPerformed

    private void solubilityRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solubilityRulesActionPerformed
        // if the solubility rules window is closed, open it
        if (WindowStatus.getWindowStatus(solubilityRulesStatus).equals("false")) {
            WindowStatus.writeFile("true", solubilityRulesStatus);
            rules = new SolubilityRules();
            rules.setVisible(true);
        }
        // else bring the window to front
        else {
            rules.setVisible(true);
            rules.setState(java.awt.Frame.NORMAL);
            rules.toFront();
        }
    }//GEN-LAST:event_solubilityRulesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChemistryWelcomeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChemistryWelcomeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChemistryWelcomeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChemistryWelcomeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChemistryWelcomeMenu().setVisible(true);
            }
        });
    }
    
    /**
     * Set up the common elements window when action is performed on the button
     */
    public void commonElementsEvent() {
        // if the common elements window is closed
        if (WindowStatus.getWindowStatus(commonElementsStatus).equals("false")) {
            // tell the file that it is open
            WindowStatus.writeFile("true", commonElementsStatus);
            // if the molar mass calculator window is open, open the common elements window and set the MolarMassCalculator window that is open as the parent
            if (WindowStatus.getWindowStatus(molarMassCalcStatus).equals("true")) {
                table = new CommonElements(calc);
                table.setParent(calc);
                table.setVisible(true);
            }
            // else if the MolarMassCalculator window is closed, just open the common elements window
            else {
                table = new CommonElements();
                table.setVisible(true);
            }
        }
        // if the common elements window is open, bring the window to front
        else {
            if (table != null) {
                table.setVisible(true);
                table.setState(java.awt.Frame.NORMAL);
                table.toFront();
            }
        }
    }
    
    /**
     * Set the parent of the common elements window to given MolarMAssCalculator Object
     * @param toBeParent given Molar MassCalculator OBject to become the parent of the common elements window
     */
    public void setCommonElementParent(MolarMassCalculator toBeParent) {
        table.setParent(toBeParent);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton balancedEquationChecker;
    private javax.swing.JButton classicalIonNames;
    private javax.swing.JButton commonNames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton metalSeriesActivity;
    private javax.swing.JButton molarMassCalc;
    private javax.swing.JButton molecularPrefixes;
    private javax.swing.JButton solubilityRules;
    private javax.swing.JButton summaryReactionTypes;
    // End of variables declaration//GEN-END:variables
}
